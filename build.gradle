buildscript {
    repositories {
    	jcenter()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'com.blackducksoftware.integration:common-gradle-plugin:0.0.+'
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE")
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.6'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'maven'
apply plugin: 'maven-publish'

version =  '0.2.1-SNAPSHOT'
def appName='hub-imageinspector-ws'

apply plugin: 'com.blackducksoftware.integration.solution'
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

// TODO these don't need to be arrays:
def linuxFlavorsDpkg = ["ubuntu:16.04"]
def linuxFlavorsRpm = ["centos:7.3.1611"]
def linuxFlavorsApk = ["alpine:3.5"]
def linuxFlavors = linuxFlavorsDpkg + linuxFlavorsRpm + linuxFlavorsApk

String blackduckDir = "/opt/blackduck"
String imagePgmDir = "${blackduckDir}/${appName}"
String dockerInspectorDir = "${blackduckDir}/hub-docker-inspector"

final def versionFile = new File("${projectDir}/src/main/resources/version.properties")
versionFile.delete()
versionFile << "program.version=${version}"

publishing {
    publications {
        mavenJava(MavenPublication) {
            def artifactName = "${buildDir}/libs/${appName}-${version}.jar"
            artifact (artifactName)
        }
    }
}

artifactory {
    publish {
        defaults { publications ('mavenJava') }
    }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
	// TEMP: pick up snapshots for dependency libs
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile 'com.blackducksoftware.integration:hub-imageinspector-lib:1.0.1-SNAPSHOT'
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("io.prometheus:simpleclient_spring_boot:0.2.0")
    compile("io.prometheus:simpleclient_hotspot:0.2.0") // TODO check that we need this
    compile("io.prometheus:simpleclient_dropwizard:0.2.0") // TODO check that we need this
    testCompile('org.springframework.boot:spring-boot-starter-test')
}


//////////// Create Docker Containers ///////////
task createApkDockerfileTasks() {
    linuxFlavorsApk.eachWithIndex {linuxFlavor, index ->
        String linuxFlavorDirName = getNameWithoutVersion(linuxFlavor)
        task "create${linuxFlavorDirName}Dockerfile"(type: Dockerfile) {
            destFile = project.file("${buildDir}/images/${linuxFlavorDirName}/${appName}/Dockerfile")
            println "destFile: ${destFile}"
            from linuxFlavor
            maintainer 'Black Duck Software'
            exposePort 8080
            //environmentVariable('LANG', 'en_US.UTF-8')
            runCommand 'apk update && apk add bash && apk add openjdk8-jre'
            runCommand "mkdir -p ${imagePgmDir}/target"
            addFile("${appName}-${version}.jar", "${imagePgmDir}/${appName}.jar")
            runCommand "chown -R 10001 ${imagePgmDir}"
            runCommand "chmod -R g+w /lib/apk"
            runCommand "mkdir -p ${dockerInspectorDir}/config"
            runCommand "mkdir -p ${dockerInspectorDir}/target"
            runCommand "mkdir -p ${dockerInspectorDir}/output"
            runCommand "mkdir -p ${dockerInspectorDir}/working"
            runCommand "chmod -R g+w ${dockerInspectorDir}"
            user '10001'
            entryPoint "java", "-jar", "${imagePgmDir}/${appName}.jar", "--server.port=8080", "--current.linux.distro=${linuxFlavorDirName}"
        }
    }
}

task createRpmDockerfileTasks() {
    linuxFlavorsRpm.eachWithIndex {linuxFlavor, index ->
        String linuxFlavorDirName = getNameWithoutVersion(linuxFlavor)
        task "create${linuxFlavorDirName}Dockerfile"(type: Dockerfile) {
            destFile = project.file("${buildDir}/images/${linuxFlavorDirName}/${appName}/Dockerfile")
            println "destFile: ${destFile}"
            from linuxFlavor
            maintainer 'Black Duck Software'
            exposePort 8081
			//environmentVariable('LANG', 'en_US.UTF-8')
            runCommand 'yum update -y && yum install -y java-1.8.0-openjdk && yum clean all -y'
            runCommand "mkdir -p ${imagePgmDir}/target"
            addFile("${appName}-${version}.jar", "${imagePgmDir}/${appName}.jar")
            runCommand "chown -R 10001 ${imagePgmDir}"
            runCommand "chmod -R g+w /var/lib"
            runCommand "mkdir -p ${dockerInspectorDir}/config"
            runCommand "mkdir -p ${dockerInspectorDir}/target"
            runCommand "mkdir -p ${dockerInspectorDir}/output"
            runCommand "mkdir -p ${dockerInspectorDir}/working"
            runCommand "chmod -R g+w ${dockerInspectorDir}"
            user '10001'
            entryPoint "java", "-jar", "${imagePgmDir}/${appName}.jar", "--server.port=8081", "--current.linux.distro=${linuxFlavorDirName}"
        }
    }
}

task createDpkgDockerfileTasks() {
    linuxFlavorsDpkg.eachWithIndex {linuxFlavor, index ->
        String linuxFlavorDirName = getNameWithoutVersion(linuxFlavor)
        task "create${linuxFlavorDirName}Dockerfile"(type: Dockerfile) {
            destFile = project.file("${buildDir}/images/${linuxFlavorDirName}/${appName}/Dockerfile")
            println "destFile: ${destFile}"
            from linuxFlavor
            maintainer 'Black Duck Software'
            exposePort 8082
			//environmentVariable('LANG', 'en_US.UTF-8')
            runCommand 'apt-get update -y && \
                apt install -y openjdk-8-jdk vim && \
                apt-get install -y locales && apt-get -y clean'
			//runCommand 'locale-gen "en_US.UTF-8"'
            runCommand "mkdir -p ${imagePgmDir}/target"
            addFile("${appName}-${version}.jar", "${imagePgmDir}/${appName}.jar")
            runCommand "chown -R 10001 ${imagePgmDir}"
            runCommand "chmod -R g+w /var/lib/dpkg"
            runCommand "mkdir -p ${dockerInspectorDir}/config"
            runCommand "mkdir -p ${dockerInspectorDir}/target"
            runCommand "mkdir -p ${dockerInspectorDir}/output"
            runCommand "mkdir -p ${dockerInspectorDir}/working"
            runCommand "chmod -R g+w ${dockerInspectorDir}"
            user '10001'
            entryPoint "java", "-jar", "${imagePgmDir}/${appName}.jar", "--server.port=8082", "--current.linux.distro=${linuxFlavorDirName}"
        }
    }
}

task createDockerfiles(dependsOn: [createubuntuDockerfile, createcentosDockerfile, createalpineDockerfile]) {
}

task createCopyJarToDockerfileDirTasks(type: Copy, dependsOn: [createDockerfiles]) {
	linuxFlavors.eachWithIndex {linuxFlavor, index ->
		String linuxFlavorDirName = getNameWithoutVersion(linuxFlavor)
		println "Creating task to copy jar from build/libs/${project.name}-${version}.jar to Dockerfile dir for ${linuxFlavorDirName}, renaming to ${appName}-${version}.jar"
        task "copyJarToDockerfileDir_${linuxFlavorDirName}"(type: Copy, dependsOn: build) {
			from "build/libs/${project.name}-${version}.jar"
			into "${buildDir}/images/${linuxFlavorDirName}/${appName}"
			rename ("${project.name}-${version}.jar", "${appName}-${version}.jar")
		}
	}
}

task copyJarFileToDockerfileDirs(dependsOn: [copyJarToDockerfileDir_ubuntu, copyJarToDockerfileDir_centos, copyJarToDockerfileDir_alpine]) {
}

task createRemoveDockerImageTasks() {
    linuxFlavors.eachWithIndex {linuxFlavor, index ->
        String linuxFlavorDirName = getNameWithoutVersion(linuxFlavor)
        def taskName = "removeDockerImage_${linuxFlavorDirName}"
        String suffix = getSuffix(linuxFlavorDirName)
        println "creating task ${taskName}"
        task "${taskName}"(type: Exec) {
			ignoreExitValue true
            commandLine "docker", "rmi", "blackducksoftware/${appName}${suffix}:${version}"
        }
    }
}

task buildImageDirs(dependsOn: [createDockerfiles, copyJarFileToDockerfileDirs]) {
}

task createBuildDockerImageTasks() {
    linuxFlavors.eachWithIndex {linuxFlavor, index ->
        String linuxFlavorDirName = getNameWithoutVersion(linuxFlavor)
        def taskName = "buildDockerImage_${linuxFlavorDirName}"
        String suffix = getSuffix(linuxFlavorDirName)
        println "creating task ${taskName}"
        task "${taskName}"(type: Exec, dependsOn: ["removeDockerImage_${linuxFlavorDirName}", buildImageDirs]) {
            commandLine "docker", "build", "--tag", "blackducksoftware/${appName}${suffix}:${version}", \
                "${buildDir}/images/${linuxFlavorDirName}/${appName}"
        }
    }
}



task buildImages(dependsOn: [buildDockerImage_alpine, buildDockerImage_centos, buildDockerImage_ubuntu]) {
}

task dockerLogin(type: Exec) {
    commandLine "docker", "login", "--username", "$System.env.DOCKER_HUB_USER", "--password", "$System.env.DOCKER_HUB_PASSWORD"
}

task pushImageAlpine(type: Exec, dependsOn: [buildDockerImage_alpine, dockerLogin]) {
	commandLine "docker", "push", "blackducksoftware/${appName}-alpine:${version}"
}

task pushImageCentos(type: Exec, dependsOn: [buildDockerImage_centos, dockerLogin]) {
	commandLine "docker", "push", "blackducksoftware/${appName}-centos:${version}"
}

task pushImageUbuntu(type: Exec, dependsOn: [buildDockerImage_ubuntu, dockerLogin]) {
	commandLine "docker", "push", "blackducksoftware/${appName}-ubuntu:${version}"
}

task pushImages(dependsOn: [pushImageAlpine, pushImageCentos, pushImageUbuntu]) {
}


//// helper methods ////
String getNameWithoutVersion(String linuxFlavor) {
    String linuxFlavorDirName = linuxFlavor
    int colonIndex = linuxFlavor.indexOf(':')
    if (colonIndex >= 0) {
        linuxFlavorDirName = linuxFlavor.subSequence(0, colonIndex)
    }
    linuxFlavorDirName
}

private String getSuffix(String linuxFlavorName) {
    String suffix = "-${linuxFlavorName}"
    suffix
}
